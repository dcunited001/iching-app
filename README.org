* Iching Project

The main idea here is to create a database of Hexagrams & associated content

** Exploring

*** UI

*** API

*** Tests

** Stories

*** Users :users:

**** TODO users: should have authentication? explore removing logins on a new branch
+ +I hate authentication+ I have an opinionated stance on authentication
+ e.g. it's a hassle, for one. it also is the key for collating your data across
  various platforms.
+ explore how auth is connected in clojure apps & in fulcro
**** TODO users: can view wilhelm translations bc copyleft?
**** TODO users: can give feedback e.g:
+ users can flag erroneous information
+ users can contribute information for review about hexagram interpretation

**** Personalization :p14n:
***** TODO users: can supply personal images for each hexagram
+ or select from a list of copyleft stock photos
***** TODO users: can customize flashcard profiles

**** Readings :readings:
***** TODO [#B] users: can do I Ching readings
***** TODO users: see interesting visual effects when generating readings
+ these visual effects are easy to port to react native, even though they use
  canvas and possibly webgl ... right?
***** TODO users: can click subjects/objects in the iching reading to replace them with symbols/subjects from their own life
+ this is awfully pipedreamy at this point
+ the idea: allow user to explore basic interpretation ... madlib-style?
***** TODO users: can view the probability of the reading's changing/hexagram pair
+ users can click to expand info like this somewhere in the UI

**** Flashcards :flashcards:
***** TODO [#B] users: can test with basic I Ching flashcards
***** TODO users: can blacklist fields on flashcards
+ these fields should appear empty on flashcards
***** TODO users: can whitelist fields on flashcards
+ these fields should always appear filled in on flashcards
***** TODO users: can select from blacklist/whitelist profiles
+ these should vary in difficulty or in their focus
***** TODO users: can narrow the flashcards statistics collected to a set of fields
+ i.e. they can test themselves on 2+ fields, but still fill in extraneous
  fields for various questions if they want

**** Flashcard Fields :fields:
***** TODO users: can test themselves on each hexagram's Hamming 1-Neighborhood
+ the set of hexgrams that differ by one are often the most frequent changing
  hexagrams that show for a reading's hexagram
+ the authors/compilers of the i ching took this into account and there are many
  references to symbols from the lines of a 1-hexagrams in a 0-hexagram
+ the I Ching's later commentators also created the [[https://en.wikipedia.org/wiki/Wen_Wang_Gua][Eight Palaces]], which are
  generated with the XOR operation from a single self-similar sequence of the
  Eight Palances, hardly the only occurance of XOR in the I Ching
***** TODO users: can test on wilhelm line translations
***** TODO users: can test on legge line translations
***** TODO users: can test on symbols/images of hexagrams
***** TODO users: can test on kanji titles
***** TODO users: can test on hexagram numbers
***** TODO users: can test on upper/lower trigrams
***** TODO users: can test on upper/lower nuclear trigrams
***** TODO users: can get information on adding text entry (keyboards/etc)
***** TODO users: can decide whether to use multiple choice for completing tests on transliterations & kangxi
***** TODO users: can test on Pinyin transliterations
***** TODO users: can test on Zhuyin transliterations
***** TODO users: can test on japanese katakana translations
+ initially, on only hexagram names
***** TODO users: can test on korean translations
+ initially, on only hexagram names
+ there are occasionally multiple korean translations for hexagrams
***** TODO users: can censor chinese history for great marxist struggle against capitalist pigs
***** TODO users: can test on mawangdui kanji titles (and the Shaughnessy translations)
+ thank God these silk texts weren't found during the +American+ Chinese
  Cultural Revolution, or Mao would have had them burned

**** Trivia :trivia:
***** TODO: users can answer flashcards on I Ching trivia

*** Developers :developers:

**** TODO [#B] devs: should have a test user :auth:tests:
+ [ ] this should already exist, check and see
**** TODO [#C] devs: should be able to publish app via react-native
**** TODO [#C] devs: should be able to suggest names of first-born children to users of apps via targeted ad campaigns powered by logins and app usage data

*** Monetization :monet:

**** TODO owners can monetize via producing posters
**** TODO owners can monitize via laminated study materials/posters
 + something I've wanted to do for a while, but i only have a handwritten
**** TODO owners can monetize by producing I Ching card decks for readings

* Fulcro Template Notes

** Status

This is an official template for a Fulcro starter project that might go on to
become a production application. It includes a number of features that a
beginner *will not* need for just playing with the library (full CI test setup,
workspaces), but is simple enough that a beginner should have no real problem
using it.

Beginners should therefore either use this template, or just generate simple
play projects from the instructions in the [[https://book.fulcrologic.com][Developer's Guide]]

Fulcro also has a Rapid Application Development add-on that makes building a
production application faster and easier; however, a *beginner* should *not*
start with RAD except to satisfy surface-level curiosity. RAD requires that you
understand the core library (even though most of it uses convention and
configuration over actual code). If you understand Fulcro and are working on a
real production application then you should probably consider using the setup
from the [[https://github.com/fulcrologic/fulcro-rad-demo][Fulcro RAD demo]] as starting point instead of this template.

RAD gives you a lot of leverage for a new project, and includes a number of
pre-written patterns written *in* Fulcro. It includes very good HTML5 routing,
form/report support. It *does not limit* your options, just expands what you
have available by default.

** About This Template

This template includes a server with a mock database and [[https://en.wikipedia.org/wiki/Cross-site_request_forgery][CSRF]] protection and a
client with login. It also integrates [[https://github.com/nubank/workspaces/][Nubank Workspaces]] for a visual,
interactive development environment for Fulcro components, which you can choose
to use. Both backend Clojure and frontend ClojureScript REPLs are configured and
started. There are also sample frontend tests.

The server code leverages [[https://github.com/tolitius/mount][Mount]] to make it easy to start and to reload changes -
see the helper functions in link: [[file:src/dev/development.clj][src/dev/development.clj]]. Client hot code
reloading is handled automatically by shadow-cljs

The main project source is in ~src/main~, the frontend code in ~.cljs~ files in
~app.*~ and ~app.ui.*~.

Dependency Aliases:

You will want to enable the ~:dev~ dependency while developing this project. In
IntelliJ this is in the "Clojure Deps" border tab window under "Aliases".

** Quick Start

This is a manual to get started with this example project. It comes with helper
~npm run~ scripts pre-loaded, you can find them in the package.json file.

Typically you want to start the server and the _main_ and/or _workspaces_ (if
you decided to use Nubank Workspaces) client builds. See below. You can simply
start everything from the command line

#+begin_src shell :tangle no
git clone --depth 1 -o fulcro-template \
    https://github.com/fulcrologic/fulcro-template.git fulcro-app cd fulcro-app

# The shadow-cljs compiler is a dependency.
yarn install # or: npm install

# 1. Start shadow-cljs frontend compilation server:
npx shadow-cljs server
# 2.: Visit the shadow-cljs compile server UI at http://localhost:9630 and
# enable the "main" and optionally "workspaces" builds 3. Start the backend
# server: (Note: for proper development you will want to start it in a
# nREPL-based REPL, see the detailed instructions for "The API Server" below.)
#+end_src

And in clojure, via ~clj -A:dev -J-Dtrace -J-Dghostwheel.enabled=true~

#+begin_src clojure :tangle no
(require 'development)
(in-ns 'development)
(start)
;; after modifications of the backend code run: `(restart)` 4. Visit the
;; application at http://localhost:3000

;; (Optional): Visit the Workspaces UI at http://localhost:3000/wslive.html
;; (Optional): Run tests via `npm run client/test` and visit http://localhost:8022
#+end_src


*** The shadow-cljs compile server

You can find the UI of the frontend compile server here: http://localhost:9630
There you can kick of the compilation of the other targets.

*** Connect to the CLJS nREPL:

1. Open and connect your nREPL to [[nrepl://localhost:9000][localhost:9000]].
2. Execute ~(shadow/repl :main)~. (you can select another target of course)

*** Backend Clojure nREPL:

The instructions provided above do not start a REPL server for the backend, only
a simple interactive REPL session. See the [[*The API Server][The API Server]] section below to learn
how to start the server from a nREPL REPL that you can connect your editor to.

*** Workspaces

If you choose to use [[https://github.com/nubank/workspaces/][Nubank Workspaces]], you have two options, you can run them
with the actual backend as described in the Quick Start above or you can run
only the frontend part (communication with the backend will fail due to CSFR):
~npm run client/workspaces~ and visit http://localhost:8023

Have a look at [[file:src/workspaces][src/workspaces]].

** Detailed instructions

*** Setting Up

The shadow-cljs compiler uses all js dependencies through NPM. If you use a
library that is in cljsjs you will also have to add it to your [[file:package.json][package.json]].

You also cannot compile this project until you install the ones it depends on
already: ~npm install~ or ~yarn install~

Adding NPM Javascript libraries is as simple as adding them to your [[file:package.json][package.json]]
file and requiring them! See the [[https://shadow-cljs.github.io/docs/UsersGuide.html#_javascript][the Shadow-cljs User's Guide]] for more
information.

*** Development Mode

Shadow-cljs handles the client-side development build. The file
[[file:src/main/app/client.cljs][src/main/app/client.cljs]] contains the code to start and refresh the client for
hot code reload.

In general it is easiest just to run the compiler in server mode: ~npx shadow-cljs server~

Then *navigate to the server URL* (shown in this example as
http://localhost:9630) and use the *Builds* menu to enable/disable whichever
builds you want watched/running.

Shadow-cljs will also start a web server for any builds that configure one. This
template configures one for workspaces (if running without the Clojure backend
is enough for you), and one for tests:

+ Workspaces (without backend): http://localhost:8023
+ Workspaces (with the backend; start it first!): http://localhost:3000/wslive.html
+ Tests: http://localhost:8022

See the server section below for working on the full-stack app itself.

**** Client REPL

The shadow-cljs compiler starts an nREPL. It is configured to start on port 9000
(in [[file:shadow-cljs.edn][shadow-cljs.edn]]).

In IntelliJ: add a *remote* Clojure REPL configuration with host ~localhost~ and
port ~9000~.

Then: ~(shadow/repl :main)~ will connect you to the REPL for a specific build
(NOTE: Make sure you have a browser running the result, or your REPL won't have
anything to talk to!)

If you're using CIDER see [[https://shadow-cljs.github.io/docs/UsersGuide.html#_cider][the CIDER section in Shadow-cljs User's Guide]] and the
comments in [[file:deps.edn][deps.edn]] for more information.

**** The API Server

In order to work with your main application you'll want to start your own server
that can also serve your application's API.

Start a [[https://cursive-ide.com/userguide/repl.html#local-repls][LOCAL clj nREPL in IntelliJ]] (using IntelliJ's classpath with the ~dev~
[[https://cursive-ide.com/userguide/deps.html#working-with-aliases][alias selected in the Clojure Deps tab]]), or from the command line: ~clj -A:dev
-J-Dtrace -J-Dguardrails.enabled=true~. Then, with clojure:

#+begin_src clojure :tangle no
(in-ns 'development)
(start)
(stop)
(restart) ; stop, reload server code, and go again
(tools-ns/refresh) ; retry code reload if hot server reload fails
#+end_src (require 'development)

The ~-J-Dtrace~ adds a JVM argument that will enable performance tracing for
Fulcro Inspect's network tab so you can see how your resolvers and mutations are
performing.

The ~-J-Dguardrails.enabled=true~ turns on guardrails instrumentation of
guardrails spec'd functions, which is a wrapper of Clojure spec that makes
instrumentation and production-time elision (for performance and size) much
easier.

NOTE: For real development, please use an editor that has REPL integration, like
Cursive (recommended) or Spacemacs.

The URL to work on your application is then http://localhost:3000.

Hot code reload, preloads, and such are all coded into the javascript.

**** Preloads

There is a preload file that is used on the development build of the application
~app.development-preload~. You can add code here that you want to execute before
the application initializes in development mode.

**** Fulcro Inspect

Fulcro inspect will preload on the development build of the main application and
workspaces. You must install the plugin in Chrome from the Chrome store (free)
to access it. It will add a Fulcro Inspect tab to the developer tools pane.

** Tests

Tests are in [[file:src/test][src/test]]. Any test namespace ending in ~-test~ will be
auto-detected.

You can write plain ~deftest~ in here, and it is preconfigured to support the
helper macros in ~fulcro-spec~ as well.

*** Running tests:


**** Clojure Tests

Typically you'll just run your tests using the editor of choice (e.g. Run tests
in namspace in IntelliJ).

The tests are also set up to run with Kaocha at the command line for your
convenience and CI tools: ~clj -A:dev:clj-tests --watch~

See the [[https://github.com/lambdaisland/kaocha][Kaocha Project]] for more details.

**** Clojurescript tests

The tests can be run in any number of browsers simply by navigating to the test
URL that shadow-cljs outputs.

CI support is done through the ~ci-test~ build in shadow, and via Karma.

If you start the ~ci-tests~ build in Shadow-cljs, then you can also run cljs
tests in a terminal "watch mode" with ~npx karma start~

Of course, this make CLJS CI easy:

#+begin_src shell :tangle no
npx shadow-cljs compile ci-tests npx karma start --single-run
#+end_src

**** Running all Tests Once

There is a UNIX Makefile that includes all of the CI commands as the default
target. Just run ~make~

** Workspaces

Workspaces is a project by Nubank that is written in Fulcro, and has great
support for developing in Fulcro. It is similar to devcards but has a more
powerful user interface, integration with Fulcro Inspect, and much more.

The source directory for making additions to your workspace is [[file:src/workspaces][src/workspaces]].

IMPORTANT: Any namespace ending in ~-ws~ will be auto-detected and added to your
workspace!

** Standalone Runnable Jar (Production, with advanced optimized client js)

See tools deps projects like Depstar. You'll need to make a release js build,
optionally pre-compile your CLJ, and package it. We will likely add a demo of
this process soon.
